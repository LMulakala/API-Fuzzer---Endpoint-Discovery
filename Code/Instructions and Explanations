#How to Run
1. Copy and paste the code into any IDE
2. I highly recommend searching for other subdomains and paths to fuzz in order to throughly understand how endpoint discovery works
3. Put your chosen subdomains and paths in the the List
4. Run the code and see the different response codes returned



#Explanation of Code

##URL Class 
URL apiUrl = new URL(url);
 
// Open connection
HttpURLConnection connection = (HttpURLConnection) apiUrl.openConnection();
                                 
The java.net.URL class in Java represents a Uniform Resource Locator, which is a pointer to a resource on the World Wide Web. It provides methods for creating, parsing, and working with URLs.

In my code I create a URL object--apiURL--and then use the method “.openConnection” from the URL class. The “openConnection()” method returns an object of the URLConnection class. This object represents a connection to the remote resource--digital content that is stored or accessible over a network--specified by the URL.


##HttpURLConnection Class
 // Set request method
 connection.setRequestMethod("GET");

The HttpURLConnection class in Java is used to send and receive data over the HTTP protocol. It's a part of the java.net package and provides methods for performing HTTP-specific operations, such as setting request methods, headers, and handling responses.

HttpURLConnection is the object specified for the class, in the class we also have the method “.setRequestMethod(“GET”)”. This method is used to define the type of action to be performed when making a request to the specified URL. By setting the request method to "GET", we're indicating that we're making a simple request to retrieve data from the server, which is one of the most common HTTP methods.

##Response Codes and Their Message
 int responseCode = connection.getResponseCode();
 System.out.println("Response Code: " + responseCode); 

Response codes are messages sent by a server to a client (in this case, our program) to indicate the status of a request. They provide information about whether the request was successful, encountered an error, or needs further action. Here are of some common response code categories:

If any 100s - Informational
If any 200s - Success
If any 300s - Redirected
the client must take some additional action in order to complete their request
If any in 400s - Client Error
If any in 500s - Server Error

String responseMessage = connection.getResponseMessage();
System.out.println("Response Message: " + responseMessage);

In order to understand what the response code means, there is also a method in the HttpURLConnection class that shows you the message.


##Response Body 
BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                  String responseBody = "";
                  String inputLine;
                  while ((inputLine = in.readLine()) != null) {
                     responseBody += inputLine;
                  }
                  in.close();
…
 System.out.println("Response Body: " + responseBody); 

The responseBody variable in the code stores the contents of the website returned by the server in response to our HTTP request. Essentially, it contains the data of the webpage we requested. However, it's important to note that this content can be empty, especially for certain types of requests or if the server does not return any content.

In the context of the API fuzzer, the responseBody allows us to inspect the data sent back by the server and analyze it for any potential issues or anomalies. We can use this information to verify if the request was successful, examine the structure of the response, or extract specific data if needed.
